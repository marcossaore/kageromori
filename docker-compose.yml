version: '3.8'

services:
  db:
    image: postgres:latest
    container_name: postgres_demo
    environment:
      POSTGRES_USER: postgresUser
      POSTGRES_PASSWORD: postgresPW
      POSTGRES_DB: postgresDB
    ports:
      - 5432:5432
    networks:
      - kageromori

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: pg@pg.com
      PGADMIN_DEFAULT_PASSWORD: dev
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - 5050:5050
    depends_on:
      - db
    networks:
      - kageromori

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks: 
      - kageromori
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks: 
      - kageromori
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks: 
      - kageromori
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  localstack:
    image: localstack/localstack:latest
    environment:
      - SERVICES=sqs,sns,dynamodb
      - AWS_DEFAULT_REGION=us-east-1
      - EDGE_PORT=4566
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
    ports:
      - '4566-4597:4566-4597'
      - '8055:8080'
    volumes:
      # - "${TMPDIR:-/tmp/localstack}:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks: 
      - kageromori
      # create sqs
      # aws --endpoint-url=http://localhost:4566 sqs create-queue --queue-name dummy-queue --profile test-profile --region eu-central-1 --output table | cat

      # create sns
      # aws --endpoint-url=http://localhost:4566 sns create-topic --name order-creation-events --region eu-central-1 --profile test-profile --output table | cat

      # https://guides.micronaut.io/latest/micronaut-jms-aws-sqs-gradle-java.html
      
      # https://www.youtube.com/watch?v=c3atABOZ2xI&list=PLkX9oUrQ1ev5kA20Es7aFk5DAho16YDzz&index=19
  kageromori:
    driver: bridge